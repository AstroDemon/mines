#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>

const int rows = 5;
const int cols = 5;
const int numMines = 5;

struct Cell {
    bool isMine;
    bool isRevealed;
    int adjacentMines;
};

void initializeGrid(std::vector<std::vector<Cell>>& grid) {
    grid.resize(rows, std::vector<Cell>(cols, {false, false, 0}));
}

void placeMines(std::vector<std::vector<Cell>>& grid) {
    int placedMines = 0;
    while (placedMines < numMines) {
        int r = rand() % rows;
        int c = rand() % cols;
        if (!grid[r][c].isMine) {
            grid[r][c].isMine = true;
            placedMines++;
        }
    }
}

void calculateAdjacentMines(std::vector<std::vector<Cell>>& grid) {
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            if (grid[i][j].isMine) continue;
            int count = 0;
            for (int dr = -1; dr <= 1; ++dr) {
                for (int dc = -1; dc <= 1; ++dc) {
                    int rr = i + dr;
                    int cc = j + dc;
                    if (rr >= 0 && rr < rows && cc >= 0 && cc < cols && grid[rr][cc].isMine) {
                        count++;
                    }
                }
            }
            grid[i][j].adjacentMines = count;
        }
    }
}

void printGrid(const std::vector<std::vector<Cell>>& grid) {
    for (const auto& row : grid) {
        for (const auto& cell : row) {
            if (cell.isRevealed) {
                if (cell.isMine) {
                    std::cout << "M ";
                } else {
                    std::cout << cell.adjacentMines << " ";
                }
            } else {
                std::cout << "* ";
            }
        }
        std::cout << "\n";
    }
}

bool revealCell(std::vector<std::vector<Cell>>& grid, int r, int c) {
    if (r < 0 || r >= rows || c < 0 || c >= cols || grid[r][c].isRevealed) {
        return false;
    }

    grid[r][c].isRevealed = true;
    if (grid[r][c].isMine) {
        return true; // Game over
    }

    if (grid[r][c].adjacentMines == 0) {
        for (int dr = -1; dr <= 1; ++dr) {
            for (int dc = -1; dc <= 1; ++dc) {
                revealCell(grid, r + dr, c + dc);
            }
        }
    }

    return false;
}

bool checkWin(const std::vector<std::vector<Cell>>& grid) {
    for (const auto& row : grid) {
        for (const auto& cell : row) {
            if (!cell.isMine && !cell.isRevealed) {
                return false;
            }
        }
    }
    return true;
}

int main() {
    srand(static_cast<unsigned>(time(0)));

    std::vector<std::vector<Cell>> grid;
    initializeGrid(grid);
    placeMines(grid);
    calculateAdjacentMines(grid);

    float bet = 0.0f;
    std::cout << "Enter your initial bet: ";
    std::cin >> bet;
    float initialBet = bet;

    bool gameOver = false;
    while (!gameOver) {
        printGrid(grid);

        int row, col;
        std::cout << "Enter the row and column to reveal (e.g., 0 0 for top-left): ";
        std::cin >> row >> col;

        if (revealCell(grid, row, col)) {
            std::cout << "You hit a mine! Game over.\n";
            std::cout << "Your final bet was: $" << bet << "\n";
            gameOver = true;
        } else {
            bet *= 1.25f;
            std::cout << "Current Bet: $" << bet << "\n";

            if (checkWin(grid)) {
                std::cout << "Congratulations! You won! Your final bet is: $" << bet << "\n";
                gameOver = true;
            }
        }
    }

    return 0;
}
